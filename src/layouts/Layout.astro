---
import "../styles/global.css";
import { SEO } from "astro-seo";

export interface Props {
  title?: string;
  description?: string;
}

const { 
  title = "Roc-IT Web - Web Development & Marketing",
  description = "Professional web development and digital marketing services for local businesses. Fast, SEO-optimized websites that drive results."
} = Astro.props;
---

<html lang="en" data-theme="winter">
  <head>
    <script is:inline>
      // Prevent FART (Flash of inAccurate coloR Theme) and fix theme detection
      function setTheme(theme) {
        document.documentElement.setAttribute("data-theme", theme);
        document.documentElement.style.colorScheme = theme === 'synthwave' ? 'dark' : 'light';
      }
      
      if (localStorage.getItem("theme") === null) {
        // Check system preference and set correct theme
        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        const defaultTheme = prefersDark ? 'night' : 'winter';
        setTheme(defaultTheme);
        localStorage.setItem("theme", defaultTheme);
      } else {
        setTheme(localStorage.getItem("theme"));
      }
      
      // Listen for system theme changes
      window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
        if (!localStorage.getItem("theme")) {
          const newTheme = e.matches ? 'night' : 'winter';
          setTheme(newTheme);
        }
      });
    </script>
    <script>
      import { themeChange } from 'theme-change';
      themeChange();
    </script>
    
    <SEO
      title={title}
      description={description}
      openGraph={{
        basic: {
          title: title,
          type: "website",
          image: "/og-image.jpg",
        }
      }}
      twitter={{
        creator: "@youragency"
      }}
    />
    
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="color-scheme" content="light dark" />
    <meta name="theme-color" content="#f59e0b" media="(prefers-color-scheme: light)" />
    <meta name="theme-color" content="#e879f9" media="(prefers-color-scheme: dark)" />
  </head>
  <body>
    <!-- Starfield Background -->
    <canvas id="stars" class="fixed top-0 left-0 w-full h-full z-0 pointer-events-none"></canvas>
    
    <div class="relative z-10">
      <slot />
    </div>
    
    <script>
      const canvas = document.getElementById('stars');
      const ctx = canvas.getContext('2d');
      let width, height, stars, shootingStars;
      
      function resize() {
        width = canvas.width = window.innerWidth;
        height = canvas.height = window.innerHeight;
        
        // Regular twinkling stars
        stars = Array(300).fill().map(() => ({
          x: Math.random() * width,
          y: Math.random() * height,
          radius: Math.random() * 1.5,
          alpha: Math.random(),
          twinkleSpeed: 0.02 + Math.random() * 0.03
        }));
        
        // Shooting stars array
        shootingStars = [];
      }
      
      function createShootingStar() {
        if (Math.random() < 0.003) { // Low probability
          shootingStars.push({
            x: Math.random() * width,
            y: Math.random() * height * 0.5, // Upper half of screen
            length: 50 + Math.random() * 50,
            speed: 3 + Math.random() * 4,
            angle: Math.PI / 6 + Math.random() * Math.PI / 6, // Diagonal
            life: 1,
            decay: 0.02
          });
        }
      }
      
      function draw() {
        ctx.clearRect(0, 0, width, height);
        
        // Draw regular twinkling stars
        stars.forEach(star => {
          star.alpha += (Math.random() - 0.5) * star.twinkleSpeed;
          star.alpha = Math.max(0.1, Math.min(1, star.alpha));
          
          ctx.beginPath();
          ctx.arc(star.x, star.y, star.radius, 0, 2 * Math.PI);
          ctx.fillStyle = `rgba(255, 255, 255, ${star.alpha})`;
          ctx.fill();
        });
        
        // Create new shooting stars
        createShootingStar();
        
        // Draw shooting stars
        shootingStars.forEach((shootingStar, index) => {
          const gradient = ctx.createLinearGradient(
            shootingStar.x, shootingStar.y,
            shootingStar.x - Math.cos(shootingStar.angle) * shootingStar.length,
            shootingStar.y - Math.sin(shootingStar.angle) * shootingStar.length
          );
          
          gradient.addColorStop(0, `rgba(255, 255, 255, ${shootingStar.life})`);
          gradient.addColorStop(1, `rgba(255, 255, 255, 0)`);
          
          ctx.strokeStyle = gradient;
          ctx.lineWidth = 2;
          ctx.beginPath();
          ctx.moveTo(shootingStar.x, shootingStar.y);
          ctx.lineTo(
            shootingStar.x - Math.cos(shootingStar.angle) * shootingStar.length,
            shootingStar.y - Math.sin(shootingStar.angle) * shootingStar.length
          );
          ctx.stroke();
          
          // Move shooting star
          shootingStar.x += Math.cos(shootingStar.angle) * shootingStar.speed;
          shootingStar.y += Math.sin(shootingStar.angle) * shootingStar.speed;
          shootingStar.life -= shootingStar.decay;
          
          // Remove expired shooting stars
          if (shootingStar.life <= 0 || shootingStar.x > width || shootingStar.y > height) {
            shootingStars.splice(index, 1);
          }
        });
        
        requestAnimationFrame(draw);
      }
      
      resize();
      window.addEventListener('resize', resize);
      draw();
    </script>
  </body>
</html>
